// Generated by Dagger (https://dagger.dev).
package com.clean.newsapp.di;

import com.clean.newsapp.data.remote.api.NewsApi;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import okhttp3.OkHttpClient;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class NetworkModule_ProvideNewsApiFactory implements Factory<NewsApi> {
  private final Provider<OkHttpClient> okHttpClientProvider;

  public NetworkModule_ProvideNewsApiFactory(Provider<OkHttpClient> okHttpClientProvider) {
    this.okHttpClientProvider = okHttpClientProvider;
  }

  @Override
  public NewsApi get() {
    return provideNewsApi(okHttpClientProvider.get());
  }

  public static NetworkModule_ProvideNewsApiFactory create(
      Provider<OkHttpClient> okHttpClientProvider) {
    return new NetworkModule_ProvideNewsApiFactory(okHttpClientProvider);
  }

  public static NewsApi provideNewsApi(OkHttpClient okHttpClient) {
    return Preconditions.checkNotNullFromProvides(NetworkModule.INSTANCE.provideNewsApi(okHttpClient));
  }
}
