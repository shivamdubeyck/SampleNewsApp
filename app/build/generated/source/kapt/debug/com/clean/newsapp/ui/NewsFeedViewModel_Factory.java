// Generated by Dagger (https://dagger.dev).
package com.clean.newsapp.ui;

import com.clean.newsapp.domain.contract.GetNewsFeedUseCase;
import com.clean.newsapp.domain.contract.GetNewsItemByIdUseCase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class NewsFeedViewModel_Factory implements Factory<NewsFeedViewModel> {
  private final Provider<GetNewsFeedUseCase> getNewsFeedUseCaseProvider;

  private final Provider<GetNewsItemByIdUseCase> getNewsItemByIdUseCaseProvider;

  public NewsFeedViewModel_Factory(Provider<GetNewsFeedUseCase> getNewsFeedUseCaseProvider,
      Provider<GetNewsItemByIdUseCase> getNewsItemByIdUseCaseProvider) {
    this.getNewsFeedUseCaseProvider = getNewsFeedUseCaseProvider;
    this.getNewsItemByIdUseCaseProvider = getNewsItemByIdUseCaseProvider;
  }

  @Override
  public NewsFeedViewModel get() {
    return newInstance(getNewsFeedUseCaseProvider.get(), getNewsItemByIdUseCaseProvider.get());
  }

  public static NewsFeedViewModel_Factory create(
      Provider<GetNewsFeedUseCase> getNewsFeedUseCaseProvider,
      Provider<GetNewsItemByIdUseCase> getNewsItemByIdUseCaseProvider) {
    return new NewsFeedViewModel_Factory(getNewsFeedUseCaseProvider, getNewsItemByIdUseCaseProvider);
  }

  public static NewsFeedViewModel newInstance(GetNewsFeedUseCase getNewsFeedUseCase,
      GetNewsItemByIdUseCase getNewsItemByIdUseCase) {
    return new NewsFeedViewModel(getNewsFeedUseCase, getNewsItemByIdUseCase);
  }
}
