// Generated by Dagger (https://dagger.dev).
package com.clean.newsapp.di;

import com.clean.newsapp.data.repository.contract.NewsFeedRepository;
import com.clean.newsapp.domain.contract.GetNewsFeedUseCase;
import com.clean.newsapp.util.NetworkStatusUtil;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import kotlinx.coroutines.CoroutineDispatcher;

@ScopeMetadata
@QualifierMetadata("com.clean.newsapp.di.IoDispatcher")
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class UseCaseModule_GetNewsFeedUseCaseFactory implements Factory<GetNewsFeedUseCase> {
  private final Provider<NewsFeedRepository> newsFeedRepositoryProvider;

  private final Provider<NetworkStatusUtil> networkStatusUtilProvider;

  private final Provider<CoroutineDispatcher> coroutineDispatcherProvider;

  public UseCaseModule_GetNewsFeedUseCaseFactory(
      Provider<NewsFeedRepository> newsFeedRepositoryProvider,
      Provider<NetworkStatusUtil> networkStatusUtilProvider,
      Provider<CoroutineDispatcher> coroutineDispatcherProvider) {
    this.newsFeedRepositoryProvider = newsFeedRepositoryProvider;
    this.networkStatusUtilProvider = networkStatusUtilProvider;
    this.coroutineDispatcherProvider = coroutineDispatcherProvider;
  }

  @Override
  public GetNewsFeedUseCase get() {
    return getNewsFeedUseCase(newsFeedRepositoryProvider.get(), networkStatusUtilProvider.get(), coroutineDispatcherProvider.get());
  }

  public static UseCaseModule_GetNewsFeedUseCaseFactory create(
      Provider<NewsFeedRepository> newsFeedRepositoryProvider,
      Provider<NetworkStatusUtil> networkStatusUtilProvider,
      Provider<CoroutineDispatcher> coroutineDispatcherProvider) {
    return new UseCaseModule_GetNewsFeedUseCaseFactory(newsFeedRepositoryProvider, networkStatusUtilProvider, coroutineDispatcherProvider);
  }

  public static GetNewsFeedUseCase getNewsFeedUseCase(NewsFeedRepository newsFeedRepository,
      NetworkStatusUtil networkStatusUtil, CoroutineDispatcher coroutineDispatcher) {
    return Preconditions.checkNotNullFromProvides(UseCaseModule.INSTANCE.getNewsFeedUseCase(newsFeedRepository, networkStatusUtil, coroutineDispatcher));
  }
}
