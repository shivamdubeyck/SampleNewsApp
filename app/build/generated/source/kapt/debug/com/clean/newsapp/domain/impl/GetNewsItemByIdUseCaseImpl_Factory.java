// Generated by Dagger (https://dagger.dev).
package com.clean.newsapp.domain.impl;

import com.clean.newsapp.data.repository.contract.NewsFeedRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import kotlinx.coroutines.CoroutineDispatcher;

@ScopeMetadata
@QualifierMetadata("com.clean.newsapp.di.IoDispatcher")
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class GetNewsItemByIdUseCaseImpl_Factory implements Factory<GetNewsItemByIdUseCaseImpl> {
  private final Provider<NewsFeedRepository> newsFeedRepositoryProvider;

  private final Provider<CoroutineDispatcher> ioDispatcherProvider;

  public GetNewsItemByIdUseCaseImpl_Factory(Provider<NewsFeedRepository> newsFeedRepositoryProvider,
      Provider<CoroutineDispatcher> ioDispatcherProvider) {
    this.newsFeedRepositoryProvider = newsFeedRepositoryProvider;
    this.ioDispatcherProvider = ioDispatcherProvider;
  }

  @Override
  public GetNewsItemByIdUseCaseImpl get() {
    return newInstance(newsFeedRepositoryProvider.get(), ioDispatcherProvider.get());
  }

  public static GetNewsItemByIdUseCaseImpl_Factory create(
      Provider<NewsFeedRepository> newsFeedRepositoryProvider,
      Provider<CoroutineDispatcher> ioDispatcherProvider) {
    return new GetNewsItemByIdUseCaseImpl_Factory(newsFeedRepositoryProvider, ioDispatcherProvider);
  }

  public static GetNewsItemByIdUseCaseImpl newInstance(NewsFeedRepository newsFeedRepository,
      CoroutineDispatcher ioDispatcher) {
    return new GetNewsItemByIdUseCaseImpl(newsFeedRepository, ioDispatcher);
  }
}
