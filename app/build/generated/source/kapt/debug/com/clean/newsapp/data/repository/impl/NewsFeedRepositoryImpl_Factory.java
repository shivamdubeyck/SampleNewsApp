// Generated by Dagger (https://dagger.dev).
package com.clean.newsapp.data.repository.impl;

import com.clean.newsapp.data.local.datasource.LocalDataSource;
import com.clean.newsapp.data.remote.datasource.RemoteDataSource;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class NewsFeedRepositoryImpl_Factory implements Factory<NewsFeedRepositoryImpl> {
  private final Provider<RemoteDataSource> remoteDataSourceProvider;

  private final Provider<LocalDataSource> localDataSourceProvider;

  public NewsFeedRepositoryImpl_Factory(Provider<RemoteDataSource> remoteDataSourceProvider,
      Provider<LocalDataSource> localDataSourceProvider) {
    this.remoteDataSourceProvider = remoteDataSourceProvider;
    this.localDataSourceProvider = localDataSourceProvider;
  }

  @Override
  public NewsFeedRepositoryImpl get() {
    return newInstance(remoteDataSourceProvider.get(), localDataSourceProvider.get());
  }

  public static NewsFeedRepositoryImpl_Factory create(
      Provider<RemoteDataSource> remoteDataSourceProvider,
      Provider<LocalDataSource> localDataSourceProvider) {
    return new NewsFeedRepositoryImpl_Factory(remoteDataSourceProvider, localDataSourceProvider);
  }

  public static NewsFeedRepositoryImpl newInstance(RemoteDataSource remoteDataSource,
      LocalDataSource localDataSource) {
    return new NewsFeedRepositoryImpl(remoteDataSource, localDataSource);
  }
}
