// Generated by Dagger (https://dagger.dev).
package com.clean.newsapp.di;

import com.clean.newsapp.data.repository.contract.NewsFeedRepository;
import com.clean.newsapp.domain.contract.GetNewsItemByIdUseCase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import kotlinx.coroutines.CoroutineDispatcher;

@ScopeMetadata
@QualifierMetadata("com.clean.newsapp.di.IoDispatcher")
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class UseCaseModule_GetNewsItemByIdUseCaseFactory implements Factory<GetNewsItemByIdUseCase> {
  private final Provider<NewsFeedRepository> newsFeedRepositoryProvider;

  private final Provider<CoroutineDispatcher> coroutineDispatcherProvider;

  public UseCaseModule_GetNewsItemByIdUseCaseFactory(
      Provider<NewsFeedRepository> newsFeedRepositoryProvider,
      Provider<CoroutineDispatcher> coroutineDispatcherProvider) {
    this.newsFeedRepositoryProvider = newsFeedRepositoryProvider;
    this.coroutineDispatcherProvider = coroutineDispatcherProvider;
  }

  @Override
  public GetNewsItemByIdUseCase get() {
    return getNewsItemByIdUseCase(newsFeedRepositoryProvider.get(), coroutineDispatcherProvider.get());
  }

  public static UseCaseModule_GetNewsItemByIdUseCaseFactory create(
      Provider<NewsFeedRepository> newsFeedRepositoryProvider,
      Provider<CoroutineDispatcher> coroutineDispatcherProvider) {
    return new UseCaseModule_GetNewsItemByIdUseCaseFactory(newsFeedRepositoryProvider, coroutineDispatcherProvider);
  }

  public static GetNewsItemByIdUseCase getNewsItemByIdUseCase(NewsFeedRepository newsFeedRepository,
      CoroutineDispatcher coroutineDispatcher) {
    return Preconditions.checkNotNullFromProvides(UseCaseModule.INSTANCE.getNewsItemByIdUseCase(newsFeedRepository, coroutineDispatcher));
  }
}
