// Generated by Dagger (https://dagger.dev).
package com.clean.newsapp.domain.impl;

import com.clean.newsapp.data.repository.contract.NewsFeedRepository;
import com.clean.newsapp.util.NetworkStatusUtil;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import kotlinx.coroutines.CoroutineDispatcher;

@ScopeMetadata
@QualifierMetadata("com.clean.newsapp.di.IoDispatcher")
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class GetNewsFeedUseCaseImpl_Factory implements Factory<GetNewsFeedUseCaseImpl> {
  private final Provider<NewsFeedRepository> newsFeedRepositoryProvider;

  private final Provider<NetworkStatusUtil> networkStatusUtilProvider;

  private final Provider<CoroutineDispatcher> ioDispatcherProvider;

  public GetNewsFeedUseCaseImpl_Factory(Provider<NewsFeedRepository> newsFeedRepositoryProvider,
      Provider<NetworkStatusUtil> networkStatusUtilProvider,
      Provider<CoroutineDispatcher> ioDispatcherProvider) {
    this.newsFeedRepositoryProvider = newsFeedRepositoryProvider;
    this.networkStatusUtilProvider = networkStatusUtilProvider;
    this.ioDispatcherProvider = ioDispatcherProvider;
  }

  @Override
  public GetNewsFeedUseCaseImpl get() {
    return newInstance(newsFeedRepositoryProvider.get(), networkStatusUtilProvider.get(), ioDispatcherProvider.get());
  }

  public static GetNewsFeedUseCaseImpl_Factory create(
      Provider<NewsFeedRepository> newsFeedRepositoryProvider,
      Provider<NetworkStatusUtil> networkStatusUtilProvider,
      Provider<CoroutineDispatcher> ioDispatcherProvider) {
    return new GetNewsFeedUseCaseImpl_Factory(newsFeedRepositoryProvider, networkStatusUtilProvider, ioDispatcherProvider);
  }

  public static GetNewsFeedUseCaseImpl newInstance(NewsFeedRepository newsFeedRepository,
      NetworkStatusUtil networkStatusUtil, CoroutineDispatcher ioDispatcher) {
    return new GetNewsFeedUseCaseImpl(newsFeedRepository, networkStatusUtil, ioDispatcher);
  }
}
