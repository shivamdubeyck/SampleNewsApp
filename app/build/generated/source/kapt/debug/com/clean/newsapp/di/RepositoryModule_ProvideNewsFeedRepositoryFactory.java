// Generated by Dagger (https://dagger.dev).
package com.clean.newsapp.di;

import com.clean.newsapp.data.local.datasource.LocalDataSource;
import com.clean.newsapp.data.remote.datasource.RemoteDataSource;
import com.clean.newsapp.data.repository.contract.NewsFeedRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("dagger.hilt.android.scopes.ViewModelScoped")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class RepositoryModule_ProvideNewsFeedRepositoryFactory implements Factory<NewsFeedRepository> {
  private final Provider<RemoteDataSource> remoteDataSourceProvider;

  private final Provider<LocalDataSource> localDataSourceProvider;

  public RepositoryModule_ProvideNewsFeedRepositoryFactory(
      Provider<RemoteDataSource> remoteDataSourceProvider,
      Provider<LocalDataSource> localDataSourceProvider) {
    this.remoteDataSourceProvider = remoteDataSourceProvider;
    this.localDataSourceProvider = localDataSourceProvider;
  }

  @Override
  public NewsFeedRepository get() {
    return provideNewsFeedRepository(remoteDataSourceProvider.get(), localDataSourceProvider.get());
  }

  public static RepositoryModule_ProvideNewsFeedRepositoryFactory create(
      Provider<RemoteDataSource> remoteDataSourceProvider,
      Provider<LocalDataSource> localDataSourceProvider) {
    return new RepositoryModule_ProvideNewsFeedRepositoryFactory(remoteDataSourceProvider, localDataSourceProvider);
  }

  public static NewsFeedRepository provideNewsFeedRepository(RemoteDataSource remoteDataSource,
      LocalDataSource localDataSource) {
    return Preconditions.checkNotNullFromProvides(RepositoryModule.INSTANCE.provideNewsFeedRepository(remoteDataSource, localDataSource));
  }
}
